@using System.ComponentModel.DataAnnotations
@using SpatiaBlazor.Components.Address.Dialog
@using SpatiaBlazor.Components.Address.Suggestions
@inject IDialogService DialogService
@implements IAddressFormView

<MudField Variant="Variant" Label="@Label">
    <div @onclick="OpenDialog" Class="cursor-pointer d-flex align-baseline align-content-stretch justify-space-between">
        <MudText>@_viewModel?.Label()</MudText>
        <MudIconButton OnClick="OpenDialog" Icon="@Icons.Material.Filled.Map" aria-label="address" Size="Size.Small"/>
    </div>
</MudField>
@foreach(var error in _validationErrors)
{
    <MudText Class="mt-2" Color="Color.Error" Typo="Typo.caption">@error</MudText>
}

@code {
    [Parameter] public Variant Variant { get; set; } = Variant.Text;
    
    [Parameter] public string? Label { get; set; }
    
    [Parameter] public AddressViewModel? Value { get; set; }
    
    [Parameter] public EventCallback<AddressViewModel> ValueChanged { get; set; }
    
    [Parameter] public AddressSuggestionsParametersViewModel? SuggestionsParameters { get; set; }
    
    [Parameter] public ValidationAttribute? Validation { get; set; }
    
    [Parameter] public Variant ButtonVariant { get; set; }
    
    [Parameter] public Color ButtonColor { get; set; }

    private AddressViewModel? _viewModel;
    
    private List<string> _validationErrors = [];

    protected override void OnParametersSet()
    {
        if (Value is not null)
        {
            _viewModel = Value with { };
        }
    }

    private async Task OpenDialog(MouseEventArgs args)
    {
        var parameters = new DialogParameters<MudAddressDialog>
        {
            {x => x.Value, _viewModel},
            {x => x.SuggestionsParameters, SuggestionsParameters},
            {x => x.ButtonVariant, ButtonVariant},
            {x => x.ButtonColor, ButtonColor}
        };

        var options = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Medium
        };

        var dialog = await DialogService.ShowAsync<MudAddressDialog>(string.Empty, parameters, options);
        var result = await dialog.Result;

        if (result is {Canceled: false, Data: AddressViewModel model})
        {
            _viewModel = model;
            await ValueChanged.InvokeAsync(_viewModel);
        }
    }

    public void TriggerRender()
    {
        StateHasChanged();
    }

    public bool IsFormValid()
    {
        return _validationErrors.Count == 0;
    }

    public Task TriggerFormValidation()
    {
        _validationErrors.Clear();
        
        var validationResult = Validation?.GetValidationResult(_viewModel, new ValidationContext(this));
        var attrValidationMessage = validationResult != ValidationResult.Success ? validationResult?.ErrorMessage : null;
        if (attrValidationMessage is not null)
        {
            _validationErrors.Add(attrValidationMessage);
        }

        return Task.CompletedTask;
    }

}