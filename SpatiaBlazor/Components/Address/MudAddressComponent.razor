@using System.Linq.Expressions
@using MudBlazor.Utilities
@using NetTopologySuite.Geometries
@using SpatiaBlazor.Components.Address.Suggestions
@using SpatiaBlazor.Components.Extensions
@using SpatiaBlazor.Geocode.Abstractions
@implements SpatiaBlazor.Components.Address.IAddressFormView
@inherits MudComponentBase

@{
    base.BuildRenderTree(__builder);
}

@if (MudDialog is null)
{
    <div class="d-flex flex-grow-1 my-4 align-content-center">
        <div Class="d-flex flex-grow-1 justify-start">
            <MudIconButton OnClick="OnCloseClicked" Icon="@Icons.Material.Filled.Close" aria-label="close" Size="Size.Small"/>
        </div>
        <MudText Typo="Typo.h6">@Title</MudText>
        <div Class="d-flex flex-grow-1 justify-end">
        </div>
    </div>
}
<MudFocusTrap Disabled="MudDialog is null" DefaultFocus="DefaultFocus.FirstChild">
    <MudAddressSuggestionsComponent
        @ref="_suggestions"
        ShrinkLabel="@ShrinkLabel"
        Variant="SuggestionsVariant"
        Clearable="Clearable"
        Value="_geocodeSelection"
        ValueChanged="OnSelectionChanged"
        Label="@(PropertyExtensions.PropertyDisplay((AddressViewModel model) => model.Geom))"
        SuggestionsParameters="SuggestionsParameters"/>
</MudFocusTrap>
@if (_suggestionRequiredError is not null)
{
<MudText Class="my-2" Color="Color.Error" Typo="Typo.caption">@_suggestionRequiredError</MudText>
}

<MudDivider Class="my-4"/>

@if (ShowForm)
{
    <MudForm @ref="_form" FieldChanged="OnFormChanged">
        @MudTextFragment(model => model.Address1, (model, s) => model.Address1 = s)

        @MudTextFragment(model => model.Address2, (model, s) => model.Address2 = s)

        @MudTextFragment(model => model.Address3, (model, s) => model.Address3 = s)

        @MudTextFragment(model => model.City, (model, s) => model.City = s)

        @MudTextFragment(model => model.StateOrProvince, (model, s) => model.StateOrProvince = s)

        @MudTextFragment(model => model.Country, (model, s) => model.Country = s)

        @MudTextFragment(model => model.ZipOrPostCode, (model, s) => model.ZipOrPostCode = s)

        @MudTextFragment(model => model.OtherAddressDetails, (model, s) => model.OtherAddressDetails = s, autoGrow: true)
    </MudForm>
}

@code {

    [Parameter] public string Title { get; set; } = "Address";

    [Parameter] public string SuggestionsLabel { get; set; } = "Search for address";

    [Parameter] public Variant SuggestionsVariant { get; set; } = Variant.Outlined;

    [Parameter] public bool Clearable { get; set; } = true;

    [Parameter] public bool AllowEdit { get; set; } = true;

    [Parameter] public bool ShowForm { get; set; } = true;

    [Parameter] public Variant FormVariant { get; set; } = Variant.Text;

    [Parameter] public bool ImmediateValidation { get; set; }

    [Parameter] public bool ShrinkLabel { get; set; } = true;

    [Parameter] public AddressViewModel? Value { get; set; }

    [Parameter] public EventCallback<AddressViewModel> ValueChanged { get; set; }
    
    [Parameter] public AddressSuggestionsParametersViewModel? SuggestionsParameters { get; set; }
    
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    private string? _suggestionRequiredError = null;
    
    private AddressViewModel _viewModel = new();

    private IGeocodeRecord? _geocodeSelection;

    private MudForm? _form;

    private MudAddressSuggestionsComponent? _suggestions;

    private RenderFragment MudTextFragment<T>(Expression<Func<AddressViewModel, T>> propertyExpression, Action<AddressViewModel, T> setFunc, bool autoGrow = false) => __builder =>
    {
        @if (!propertyExpression.IsHidden())
        {
            <MudTextField T="T" Disabled="@(IsDisabled(propertyExpression))"
                          Variant="@FormVariant"
                          Immediate="@ImmediateValidation"
                          ShrinkLabel="@ShrinkLabel"
                          AutoGrow="autoGrow"
                          Value="@(propertyExpression.Compile().Invoke(_viewModel))"
                          ValueChanged="@(val => setFunc(_viewModel, val))"
                          Label="@(propertyExpression.PropertyDisplay())"
                          Validation="propertyExpression.PropertyValidation()"/>   
        }
    };

    protected override void OnParametersSet()
    {
        _viewModel = Value ?? new AddressViewModel();
        if (_geocodeSelection is null && _suggestions != null)
        {
            _suggestions.Text = _viewModel.Label();
        }
    }

    private async Task OnFormChanged(FormFieldChangedEventArgs args)
    {
        await ValueChanged.InvokeAsync(_viewModel);
    }

    private async Task OnSelectionChanged(IGeocodeRecord selected)
    {
        _geocodeSelection = selected;
        if (_geocodeSelection is not null)
        {
            _viewModel.UpdateFromGeocode(_geocodeSelection);
            await ValueChanged.InvokeAsync(_viewModel);
        }
        else
        {
            _viewModel.Clear();
            await ValueChanged.InvokeAsync(null);
        }
    }

    public void TriggerRender()
    {
        StateHasChanged();
    }

    public bool IsFormValid()
    {
        var geomValid = !PropertyExtensions.IsRequired((AddressViewModel model) => model.Geom) || _viewModel.Geom is not null;
        return geomValid && (_form?.IsValid ?? false);
    }

    public async Task TriggerFormValidation()
    {
        if (_form is null)
        {
            return;
        }

        if (PropertyExtensions.IsRequired((AddressViewModel model) => model.Geom) && _viewModel.Geom is null)
        {
            var requiredMsg = PropertyExtensions.RequiredMessage((AddressViewModel model) => model.Geom);
            _suggestionRequiredError = requiredMsg;
        }
        else
        {
            _suggestionRequiredError = null;
        }
        
        await _form.Validate();
    }
    
    private async Task OnCloseClicked(MouseEventArgs? args = null)
    {
        if (_suggestions is not null)
        {
            await _suggestions.ClearAsync();   
        }
        _viewModel.Clear();
        await ValueChanged.InvokeAsync(null);
    }

    private bool IsDisabled<T>(Expression<Func<AddressViewModel, T>> propertyExpression)
    {
        return !AllowEdit && !propertyExpression.IsEditable();
    }
}