@using SpatiaBlazor.Components.Address.Suggestions
<MudDialog>
    <DialogContent>
        <div class="d-flex flex-grow-1 my-4 align-content-center">
            <div Class="d-flex flex-grow-1 justify-start">
                <MudIconButton OnClick="OnCloseClicked" Icon="@Icons.Material.Filled.Close" aria-label="close" Size="Size.Small"/>
            </div>
            <MudText Typo="Typo.h6">@Title</MudText>
            <div Class="d-flex flex-grow-1 justify-end">
                <MudButton Variant="@ButtonVariant" Color="@ButtonColor" OnClick="OnSaveClicked">Save</MudButton>
            </div>
        </div>
        <div class="pa-4">
            <MudAddressComponent @ref="_form" @bind-Value="_viewModel" SuggestionsParameters="SuggestionsParameters"></MudAddressComponent>
        </div>
    </DialogContent>
</MudDialog>

@code {
    
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }
    
    [Parameter] public string Title { get; set; } = "Address";
    
    [Parameter] public AddressViewModel? Value { get; set; }
    
    [Parameter] public AddressSuggestionsParametersViewModel? SuggestionsParameters { get; set; }

    [Parameter] public Variant ButtonVariant { get; set; } = Variant.Text;

    [Parameter] public Color ButtonColor { get; set; } = Color.Default;

    private AddressViewModel? _viewModel;
     
    private IAddressFormView? _form;
    
    protected override void OnInitialized()
    {
        if (MudDialog != null)
        {
            MudDialog.Options.NoHeader = true;
            MudDialog.SetOptions(MudDialog.Options);
        }
    }
    
    protected override void OnParametersSet()
    {
        if (Value is not null)
        {
            _viewModel = Value with { };
        }
    }
    
    private void OnCloseClicked(MouseEventArgs? args = null)
    {
        _viewModel?.Clear();
        MudDialog?.Close(DialogResult.Cancel());
    }

    private async Task OnSaveClicked(MouseEventArgs? args = null)
    {
        if (_form is null)
        {
            MudDialog?.Close(DialogResult.Cancel());
            return;
        }
        
        await _form.TriggerFormValidation();

        if (_form.IsFormValid())
        {
            MudDialog?.Close(DialogResult.Ok(_viewModel));   
        }
    }
}